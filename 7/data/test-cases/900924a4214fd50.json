{"uid":"900924a4214fd50","name":"Get pet details","fullName":"tests.api-tests.test_petstore_api#test_get_pet","historyId":"c49116be73b20572a10016051c639473","time":{"start":1741107855170,"stop":1741107855447,"duration":277},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404","statusTrace":"pet_store_api = <api.petstore_api.PetStoreApi object at 0x7f9b9daed3d0>\n\n    @allure.title(\"Get pet details\")\n    def test_get_pet(pet_store_api):\n        pet_id = 1\n>       pet = pet_store_api.get_pet(pet_id)\n\ntests/api-tests/test_petstore_api.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/petstore_api.py:18: in get_pet\n    response = send_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_context = <playwright._impl._fetch.APIRequestContext object at 0x7f9b9ddc3cd0>\nmethod = 'GET', endpoint = 'pet/1', status_code = 200, extra_headers = None\ndata = None, form_data = None, schema = <class 'api.schema.PetSchema'>\n\n    def send_request(\n            api_context: APIRequestContext,\n            method: str,\n            endpoint: str,\n            status_code: int,\n            extra_headers: Dict[str, str] = None,\n            data: dict = None,\n            form_data: dict = None,\n            schema: Type[T] = None)-> Union[APIResponse, T]:\n        \"\"\"\n        Request sender with schema validation.\n    \n        :param api_context: Playwright APIRequestContext\n        :param method: HTTP method (GET, POST, PUT, DELETE)\n        :param endpoint: API endpoint\n        :param status_code: Expected response status code\n        :param schema: Pydantic schema for validation (Optional)\n        :param kwargs: Additional arguments (json, params, headers, etc.)\n        :return: APIResponse\n        \"\"\"\n        with allure.step(f\"Sending {method} request to {endpoint}\"):\n            logging.info(f\"Request: {method} {endpoint} | Data: {data}\")\n    \n            response: APIResponse = api_context.fetch(endpoint, method=method, data=data, form=form_data, headers=extra_headers)\n            logging.info(f\"Response: {response.status} | {response.text()}\")    # log response before validation\n    \n            # Validate response status\n>           assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\nE           AssertionError: Expected status code: 200, Actual: 404\n\nutils/request_helper.py:38: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1741107854910,"stop":1741107854910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1741107854910,"stop":1741107854910,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1741107854911,"stop":1741107854911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1741107854911,"stop":1741107854911,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1741107854911,"stop":1741107855161,"duration":250},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1741107855161,"stop":1741107855169,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_store_api","time":{"start":1741107855169,"stop":1741107855170,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404","statusTrace":"pet_store_api = <api.petstore_api.PetStoreApi object at 0x7f9b9daed3d0>\n\n    @allure.title(\"Get pet details\")\n    def test_get_pet(pet_store_api):\n        pet_id = 1\n>       pet = pet_store_api.get_pet(pet_id)\n\ntests/api-tests/test_petstore_api.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/petstore_api.py:18: in get_pet\n    response = send_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_context = <playwright._impl._fetch.APIRequestContext object at 0x7f9b9ddc3cd0>\nmethod = 'GET', endpoint = 'pet/1', status_code = 200, extra_headers = None\ndata = None, form_data = None, schema = <class 'api.schema.PetSchema'>\n\n    def send_request(\n            api_context: APIRequestContext,\n            method: str,\n            endpoint: str,\n            status_code: int,\n            extra_headers: Dict[str, str] = None,\n            data: dict = None,\n            form_data: dict = None,\n            schema: Type[T] = None)-> Union[APIResponse, T]:\n        \"\"\"\n        Request sender with schema validation.\n    \n        :param api_context: Playwright APIRequestContext\n        :param method: HTTP method (GET, POST, PUT, DELETE)\n        :param endpoint: API endpoint\n        :param status_code: Expected response status code\n        :param schema: Pydantic schema for validation (Optional)\n        :param kwargs: Additional arguments (json, params, headers, etc.)\n        :return: APIResponse\n        \"\"\"\n        with allure.step(f\"Sending {method} request to {endpoint}\"):\n            logging.info(f\"Request: {method} {endpoint} | Data: {data}\")\n    \n            response: APIResponse = api_context.fetch(endpoint, method=method, data=data, form=form_data, headers=extra_headers)\n            logging.info(f\"Response: {response.status} | {response.text()}\")    # log response before validation\n    \n            # Validate response status\n>           assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\nE           AssertionError: Expected status code: 200, Actual: 404\n\nutils/request_helper.py:38: AssertionError","steps":[{"name":"Get pet","time":{"start":1741107855170,"stop":1741107855447,"duration":277},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/api/petstore_api.py\", line 18, in get_pet\n    response = send_request(\n               ^^^^^^^^^^^^^\n  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/utils/request_helper.py\", line 38, in send_request\n    assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Sending GET request to pet/1","time":{"start":1741107855170,"stop":1741107855447,"duration":277},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404\n","statusTrace":"  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/utils/request_helper.py\", line 38, in send_request\n    assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"pet_id","value":"1"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1741107978590,"stop":1741107978593,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1741107978593,"stop":1741107978599,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.api-tests"},{"name":"suite","value":"test_petstore_api"},{"name":"host","value":"fv-az1721-397"},{"name":"thread","value":"6152-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api-tests.test_petstore_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":5,"broken":0,"skipped":0,"passed":0,"unknown":0,"total":5},"items":[{"uid":"c0e7401d3866edf6","reportUrl":"https://knozdogan.github.io/WebTestAutomation/6//#testresult/c0e7401d3866edf6","status":"failed","statusDetails":"AssertionError: assert 'dog' == 'Rex'\n  \n  - Rex\n  + dog","time":{"start":1741093305908,"stop":1741093306228,"duration":320}},{"uid":"86365a3378926426","reportUrl":"https://knozdogan.github.io/WebTestAutomation/5//#testresult/86365a3378926426","status":"failed","statusDetails":"AssertionError: assert 'doggie' == 'Rex'\n  \n  - Rex\n  + doggie","time":{"start":1741092980427,"stop":1741092980885,"duration":458}},{"uid":"19d6671c74f87e8f","reportUrl":"https://knozdogan.github.io/WebTestAutomation/4//#testresult/19d6671c74f87e8f","status":"failed","statusDetails":"AssertionError: assert 'dog' == 'Rex'\n  \n  - Rex\n  + dog","time":{"start":1741090087825,"stop":1741090088278,"duration":453}},{"uid":"7649a89fd2b0773f","reportUrl":"https://knozdogan.github.io/WebTestAutomation/3//#testresult/7649a89fd2b0773f","status":"failed","statusDetails":"AssertionError: Expected status code: 200, Actual: 404","time":{"start":1741088082061,"stop":1741088082349,"duration":288}}]},"tags":[]},"source":"900924a4214fd50.json","parameterValues":[]}