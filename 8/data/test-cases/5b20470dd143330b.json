{"uid":"5b20470dd143330b","name":"Update pet details","fullName":"tests.api-tests.test_petstore_api#test_update_pet","historyId":"c3bf6b31288cb030fb1bba2b1dfe8eb3","time":{"start":1741107873529,"stop":1741107873545,"duration":16},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404","statusTrace":"pet_store_api = <api.petstore_api.PetStoreApi object at 0x7f5f17d24b10>\n\n    @allure.title(\"Update pet details\")\n    def test_update_pet(pet_store_api):\n>       pet_store_api.update_pet(pet_id=1, name='Rex', status='sold')\n\ntests/api-tests/test_petstore_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/petstore_api.py:42: in update_pet\n    response = send_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_context = <playwright._impl._fetch.APIRequestContext object at 0x7f5f18017ad0>\nmethod = 'POST', endpoint = 'pet/1', status_code = 200\nextra_headers = {'Content-Type': 'application/x-www-form-urlencoded'}\ndata = None, form_data = {'name': 'Rex', 'status': 'sold'}\nschema = <class 'api.schema.CommonResponseSchema'>\n\n    def send_request(\n            api_context: APIRequestContext,\n            method: str,\n            endpoint: str,\n            status_code: int,\n            extra_headers: Dict[str, str] = None,\n            data: dict = None,\n            form_data: dict = None,\n            schema: Type[T] = None)-> Union[APIResponse, T]:\n        \"\"\"\n        Request sender with schema validation.\n    \n        :param api_context: Playwright APIRequestContext\n        :param method: HTTP method (GET, POST, PUT, DELETE)\n        :param endpoint: API endpoint\n        :param status_code: Expected response status code\n        :param schema: Pydantic schema for validation (Optional)\n        :param kwargs: Additional arguments (json, params, headers, etc.)\n        :return: APIResponse\n        \"\"\"\n        with allure.step(f\"Sending {method} request to {endpoint}\"):\n            logging.info(f\"Request: {method} {endpoint} | Data: {data}\")\n    \n            response: APIResponse = api_context.fetch(endpoint, method=method, data=data, form=form_data, headers=extra_headers)\n            logging.info(f\"Response: {response.status} | {response.text()}\")    # log response before validation\n    \n            # Validate response status\n>           assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\nE           AssertionError: Expected status code: 200, Actual: 404\n\nutils/request_helper.py:38: AssertionError","flaky":true,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1741107873005,"stop":1741107873005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1741107873005,"stop":1741107873005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1741107873005,"stop":1741107873005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright","time":{"start":1741107873005,"stop":1741107873243,"duration":238},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_verify_url","time":{"start":1741107873005,"stop":1741107873005,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"api_request_context","time":{"start":1741107873243,"stop":1741107873251,"duration":8},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pet_store_api","time":{"start":1741107873529,"stop":1741107873529,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404","statusTrace":"pet_store_api = <api.petstore_api.PetStoreApi object at 0x7f5f17d24b10>\n\n    @allure.title(\"Update pet details\")\n    def test_update_pet(pet_store_api):\n>       pet_store_api.update_pet(pet_id=1, name='Rex', status='sold')\n\ntests/api-tests/test_petstore_api.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \napi/petstore_api.py:42: in update_pet\n    response = send_request(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\napi_context = <playwright._impl._fetch.APIRequestContext object at 0x7f5f18017ad0>\nmethod = 'POST', endpoint = 'pet/1', status_code = 200\nextra_headers = {'Content-Type': 'application/x-www-form-urlencoded'}\ndata = None, form_data = {'name': 'Rex', 'status': 'sold'}\nschema = <class 'api.schema.CommonResponseSchema'>\n\n    def send_request(\n            api_context: APIRequestContext,\n            method: str,\n            endpoint: str,\n            status_code: int,\n            extra_headers: Dict[str, str] = None,\n            data: dict = None,\n            form_data: dict = None,\n            schema: Type[T] = None)-> Union[APIResponse, T]:\n        \"\"\"\n        Request sender with schema validation.\n    \n        :param api_context: Playwright APIRequestContext\n        :param method: HTTP method (GET, POST, PUT, DELETE)\n        :param endpoint: API endpoint\n        :param status_code: Expected response status code\n        :param schema: Pydantic schema for validation (Optional)\n        :param kwargs: Additional arguments (json, params, headers, etc.)\n        :return: APIResponse\n        \"\"\"\n        with allure.step(f\"Sending {method} request to {endpoint}\"):\n            logging.info(f\"Request: {method} {endpoint} | Data: {data}\")\n    \n            response: APIResponse = api_context.fetch(endpoint, method=method, data=data, form=form_data, headers=extra_headers)\n            logging.info(f\"Response: {response.status} | {response.text()}\")    # log response before validation\n    \n            # Validate response status\n>           assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\nE           AssertionError: Expected status code: 200, Actual: 404\n\nutils/request_helper.py:38: AssertionError","steps":[{"name":"Update pet","time":{"start":1741107873530,"stop":1741107873545,"duration":15},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.11/x64/lib/python3.11/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/api/petstore_api.py\", line 42, in update_pet\n    response = send_request(\n               ^^^^^^^^^^^^^\n  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/utils/request_helper.py\", line 38, in send_request\n    assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[{"name":"Sending POST request to pet/1","time":{"start":1741107873530,"stop":1741107873545,"duration":15},"status":"failed","statusMessage":"AssertionError: Expected status code: 200, Actual: 404\n","statusTrace":"  File \"/home/runner/work/WebTestAutomation/WebTestAutomation/utils/request_helper.py\", line 38, in send_request\n    assert response.status == status_code, f\"Expected status code: {status_code}, Actual: {response.status}\"\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[{"name":"pet_id","value":"1"},{"name":"name","value":"'Rex'"},{"name":"status","value":"'sold'"}],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"api_request_context::0","time":{"start":1741107996638,"stop":1741107996641,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"playwright::0","time":{"start":1741107996641,"stop":1741107996648,"duration":7},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"tests.api-tests"},{"name":"suite","value":"test_petstore_api"},{"name":"host","value":"fv-az1337-647"},{"name":"thread","value":"6086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.api-tests.test_petstore_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":3,"broken":0,"skipped":0,"passed":3,"unknown":0,"total":6},"items":[{"uid":"195920513f7a49f3","reportUrl":"https://knozdogan.github.io/WebTestAutomation/7//#testresult/195920513f7a49f3","status":"failed","statusDetails":"AssertionError: Expected status code: 200, Actual: 404","time":{"start":1741107855482,"stop":1741107855504,"duration":22}},{"uid":"194fef2a733889e1","reportUrl":"https://knozdogan.github.io/WebTestAutomation/6//#testresult/194fef2a733889e1","status":"passed","time":{"start":1741093306263,"stop":1741093306292,"duration":29}},{"uid":"2b045b83ecdc9c1f","reportUrl":"https://knozdogan.github.io/WebTestAutomation/5//#testresult/2b045b83ecdc9c1f","status":"passed","time":{"start":1741092980975,"stop":1741092981057,"duration":82}},{"uid":"94d44ec564ec41db","reportUrl":"https://knozdogan.github.io/WebTestAutomation/4//#testresult/94d44ec564ec41db","status":"passed","time":{"start":1741090088367,"stop":1741090088450,"duration":83}},{"uid":"27ff9d7ff745d033","reportUrl":"https://knozdogan.github.io/WebTestAutomation/3//#testresult/27ff9d7ff745d033","status":"failed","statusDetails":"AssertionError: Expected status code: 200, Actual: 404","time":{"start":1741088082392,"stop":1741088082419,"duration":27}}]},"tags":[]},"source":"5b20470dd143330b.json","parameterValues":[]}